---
description: nest-react-bff-development-standards
globs: *
---


# Nest.js, Redis, React, TypeScript, and gRPC BFF Development Standards

基础规范:
  - 使用 2 空格缩进。
  - 优先使用 `const` 声明变量，`let` 仅在需要可变时使用。
  - 显式声明函数返回类型，以增强可读性和可维护性。
  - 使用 TypeScript 的类型定义，确保类型安全。

Nest.js 规范:
  - 遵循 Nest.js 的模块化结构，使用 `@Module` 装饰器组织代码。
  - 将控制器、服务和模块分开，确保职责清晰。
  - 使用 `@Controller` 和 `@Get` 等装饰器定义路由。

Redis 规范:
  - 使用 Redis 作为缓存层，缓存频繁访问的数据，提升性能。
  - 针对数据的使用场景设计合理的缓存策略（如过期时间）。
  - 使用 Redis 客户端库（如 `ioredis`）进行连接和操作。

React 规范:
  - 使用函数组件和 Hooks 进行组件开发，避免使用类组件。
  - 确保所有组件具有明确的 prop 类型定义，使用 `PropTypes` 或 TypeScript。
  - 组件间通信使用 Context API 或 Redux 进行状态管理。

gRPC 规范:
  - 使用 Protocol Buffers (protobuf) 定义 gRPC 服务和消息格式。
  - 在 Nest.js 中使用 `@GrpcMethod` 装饰器定义 gRPC 服务方法。
  - 确保服务的接口文档清晰且易于理解。

模板渲染引擎规范:
  - 使用适合的模板引擎（如 EJS 或 Handlebars）进行服务端渲染。
  - 确保在服务端渲染支持 React 组件的渲染。
  - 将数据传递给模板时，确保数据格式一致性。

示例代码:
  Nest.js Controller Example:
    code: |
      import { Controller, Get, Render } from '@nestjs/common';
      import { RedisService } from './redis.service';

      @Controller()
      export class AppController {
        constructor(private readonly redisService: RedisService) {}

        @Get('/')
        @Render('index')  # Using a template engine
        async root() {
          const data = await this.redisService.get('some-key');
          return { data };  # Pass data to the template
        }
      }

  React Component Example:
    code: |
      import React from 'react';

      interface Props {
        data: any;
      }

      const MyComponent: React.FC<Props> = ({ data }) => {
        return <div>{data}</div>;
      };

      export default MyComponent;

代码结构和风格:
  - 使用语义化的文件和目录命名，以提高可读性。
  - 遵循清晰的组件结构，将组件、服务和模块分开。
  - 每个模块应包含相应的测试文件，确保功能可用。

命名约定:
  - 使用小写字母和短杠作为目录名称（例如，`users-module`）。
  - 控制器和服务名称应采用 PascalCase，文件名统一使用 kebab-case。
  - 路由路径应使用小写字母和斜杠（例如，`/users`）。

版本控制:
  - 遵循分支命名约定：`feature/<功能名称>`、`bugfix/<错误描述>`。
  - 提交信息应简洁明了，包含变更的目的和影响，使用动词开头。

性能优化:
  - 使用 Redis 实现数据的懒加载和缓存，减少数据库压力。
  - 确保 React 组件的性能，通过使用 `React.memo` 和 `useCallback` 等优化手段。
  - 定期监控和分析服务的性能，调整 Redis 和 gRPC 的使用策略。

安全性:
  - 对所有用户输入进行验证，以防止 SQL 注入和 XSS 攻击。
  - 确保使用 HTTPS 与任何 API 进行安全通信，保护用户数据。
  - 对敏感数据进行加密存储，确保用户隐私安全。

日志管理:
  - 使用 Nest.js 提供的日志服务，记录重要事件和错误。
  - 定期监控和分析日志，以便于排查问题和优化性能。

测试:
  - 编写单元测试和集成测试，确保代码质量。
  - 使用 Jest 作为测试框架，遵循 Nest.js 的测试规范。
  - 针对 gRPC 服务编写测试，确保接口的稳定性和正确性。
  - 使用 React Testing Library 进行组件测试，确保 UI 的正确性。

无障碍访问:
  - 确保遵循无障碍访问标准（a11y），使用 ARIA 角色和标签。
  - 支持文本缩放和高对比度，以提高可访问性，确保所有用户均能顺利使用应用。