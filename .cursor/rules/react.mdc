---
description: 使用react zustand 多页面应用脚手架
globs: 
---
---
name: react-ts-rules
description: TypeScript coding standards and best practices
globs:
  - 'src/**/*.ts'
  - 'src/**/*.tsx'
  - '!src/**/*.test.ts'
priority: 1
---

# React Zustand TypeScript Coding Standards

## 基础规范

- 使用 2 空格缩进。
- 优先使用 `const` 声明变量，`let` 仅在需要可变时使用。
- 显式声明函数返回类型，以增强可读性和可维护性。

## 最佳实践

- 避免使用 `any` 类型，尽量使用具体类型或接口。
- 合理使用泛型，提升代码的灵活性和可重用性。
- 优先使用接口（`interface`）而非类型别名（`type`），以便于扩展。

# UI 和样式

- 使用 Tailwind CSS 进行响应式设计和样式。
- 采用移动优先的设计模式，确保在小屏幕上良好展示。
- 优先使用 CSS 变量来管理主题和颜色。

# 代码风格和结构

- 编写简洁、可维护的 JavaScript 和 HTML 代码。
- 使用语义化的 HTML5 元素（如 `<header>`、`<footer>` 等），提高可读性。
- 系统化地组织文件：`components/`、`styles/`、`assets/`，并遵循模块化原则。

# 命名约定

- 使用小写字母和短杠作为目录名称（例如，`components/navigation-bar`）。
- 组件名称应采用 PascalCase，文件名统一使用 kebab-case。
- CSS 类名应使用 BEM（块、元素、修饰符）命名法。

# 版本控制

- 遵循分支命名约定：`feature/<功能名称>`、`bugfix/<错误描述>`。
- 提交信息应简洁明了，包含变更的目的和影响，使用动词开头。

# 性能优化

- 为图片和资产实现懒加载，提升页面加载速度。
- 使用现代格式（如 WebP）优化图片，减少文件大小。
- 尽量减少重型 JavaScript 库的使用，优先选择轻量级替代方案。
- 使用代码分割和懒加载提高应用性能。

# 无障碍访问

- 确保遵循无障碍访问标准（a11y），使用 ARIA 角色和标签。
- 支持文本缩放和高对比度，以提高可访问性，确保所有用户均能顺利使用应用。

# 安全性

- 对所有用户输入进行清理，以防止 XSS 攻击，使用安全库进行处理。
- 确保使用 HTTPS 与任何 API 进行安全通信，保护用户数据。
- 对敏感数据进行加密存储，确保用户隐私安全。